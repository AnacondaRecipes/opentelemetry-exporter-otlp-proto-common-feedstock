From 59cd0045c517ecec88cb692e095bff8a94a22dbc Mon Sep 17 00:00:00 2001
From: Mohamed Sentissi <msentissi@anaconda.com>
Date: Wed, 16 Oct 2024 17:37:40 -0400
Subject: [PATCH] remove opentelemetry test dependencies

---
 tests/test_metrics_encoder.py | 316 ----------------------------------
 1 file changed, 316 deletions(-)

diff --git a/tests/test_metrics_encoder.py b/tests/test_metrics_encoder.py
index 0f435ae..4f2dbf6 100644
--- a/tests/test_metrics_encoder.py
+++ b/tests/test_metrics_encoder.py
@@ -52,7 +52,6 @@ from opentelemetry.sdk.resources import Resource
 from opentelemetry.sdk.util.instrumentation import (
     InstrumentationScope as SDKInstrumentationScope,
 )
-from opentelemetry.test.metrictestutil import _generate_gauge, _generate_sum
 
 
 class TestOTLPMetricsEncoder(unittest.TestCase):
@@ -97,321 +96,8 @@ class TestOTLPMetricsEncoder(unittest.TestCase):
         ),
     )
 
-    def test_encode_sum_int(self):
-        metrics_data = MetricsData(
-            resource_metrics=[
-                ResourceMetrics(
-                    resource=Resource(
-                        attributes={"a": 1, "b": False},
-                        schema_url="resource_schema_url",
-                    ),
-                    scope_metrics=[
-                        ScopeMetrics(
-                            scope=SDKInstrumentationScope(
-                                name="first_name",
-                                version="first_version",
-                                schema_url="insrumentation_scope_schema_url",
-                            ),
-                            metrics=[_generate_sum("sum_int", 33)],
-                            schema_url="instrumentation_scope_schema_url",
-                        )
-                    ],
-                    schema_url="resource_schema_url",
-                )
-            ]
-        )
-        expected = ExportMetricsServiceRequest(
-            resource_metrics=[
-                pb2.ResourceMetrics(
-                    schema_url="resource_schema_url",
-                    resource=OTLPResource(
-                        attributes=[
-                            KeyValue(key="a", value=AnyValue(int_value=1)),
-                            KeyValue(
-                                key="b", value=AnyValue(bool_value=False)
-                            ),
-                        ]
-                    ),
-                    scope_metrics=[
-                        pb2.ScopeMetrics(
-                            scope=InstrumentationScope(
-                                name="first_name", version="first_version"
-                            ),
-                            metrics=[
-                                pb2.Metric(
-                                    name="sum_int",
-                                    unit="s",
-                                    description="foo",
-                                    sum=pb2.Sum(
-                                        data_points=[
-                                            pb2.NumberDataPoint(
-                                                attributes=[
-                                                    KeyValue(
-                                                        key="a",
-                                                        value=AnyValue(
-                                                            int_value=1
-                                                        ),
-                                                    ),
-                                                    KeyValue(
-                                                        key="b",
-                                                        value=AnyValue(
-                                                            bool_value=True
-                                                        ),
-                                                    ),
-                                                ],
-                                                start_time_unix_nano=1641946015139533244,
-                                                time_unix_nano=1641946016139533244,
-                                                as_int=33,
-                                            )
-                                        ],
-                                        aggregation_temporality=AggregationTemporality.CUMULATIVE,
-                                        is_monotonic=True,
-                                    ),
-                                )
-                            ],
-                        )
-                    ],
-                )
-            ]
-        )
-        actual = encode_metrics(metrics_data)
-        self.assertEqual(expected, actual)
-
-    def test_encode_sum_double(self):
-        metrics_data = MetricsData(
-            resource_metrics=[
-                ResourceMetrics(
-                    resource=Resource(
-                        attributes={"a": 1, "b": False},
-                        schema_url="resource_schema_url",
-                    ),
-                    scope_metrics=[
-                        ScopeMetrics(
-                            scope=SDKInstrumentationScope(
-                                name="first_name",
-                                version="first_version",
-                                schema_url="insrumentation_scope_schema_url",
-                            ),
-                            metrics=[_generate_sum("sum_double", 2.98)],
-                            schema_url="instrumentation_scope_schema_url",
-                        )
-                    ],
-                    schema_url="resource_schema_url",
-                )
-            ]
-        )
-        expected = ExportMetricsServiceRequest(
-            resource_metrics=[
-                pb2.ResourceMetrics(
-                    schema_url="resource_schema_url",
-                    resource=OTLPResource(
-                        attributes=[
-                            KeyValue(key="a", value=AnyValue(int_value=1)),
-                            KeyValue(
-                                key="b", value=AnyValue(bool_value=False)
-                            ),
-                        ]
-                    ),
-                    scope_metrics=[
-                        pb2.ScopeMetrics(
-                            scope=InstrumentationScope(
-                                name="first_name", version="first_version"
-                            ),
-                            metrics=[
-                                pb2.Metric(
-                                    name="sum_double",
-                                    unit="s",
-                                    description="foo",
-                                    sum=pb2.Sum(
-                                        data_points=[
-                                            pb2.NumberDataPoint(
-                                                attributes=[
-                                                    KeyValue(
-                                                        key="a",
-                                                        value=AnyValue(
-                                                            int_value=1
-                                                        ),
-                                                    ),
-                                                    KeyValue(
-                                                        key="b",
-                                                        value=AnyValue(
-                                                            bool_value=True
-                                                        ),
-                                                    ),
-                                                ],
-                                                start_time_unix_nano=1641946015139533244,
-                                                time_unix_nano=1641946016139533244,
-                                                as_double=2.98,
-                                            )
-                                        ],
-                                        aggregation_temporality=AggregationTemporality.CUMULATIVE,
-                                        is_monotonic=True,
-                                    ),
-                                )
-                            ],
-                        )
-                    ],
-                )
-            ]
-        )
-        actual = encode_metrics(metrics_data)
-        self.assertEqual(expected, actual)
-
-    def test_encode_gauge_int(self):
-        metrics_data = MetricsData(
-            resource_metrics=[
-                ResourceMetrics(
-                    resource=Resource(
-                        attributes={"a": 1, "b": False},
-                        schema_url="resource_schema_url",
-                    ),
-                    scope_metrics=[
-                        ScopeMetrics(
-                            scope=SDKInstrumentationScope(
-                                name="first_name",
-                                version="first_version",
-                                schema_url="insrumentation_scope_schema_url",
-                            ),
-                            metrics=[_generate_gauge("gauge_int", 9000)],
-                            schema_url="instrumentation_scope_schema_url",
-                        )
-                    ],
-                    schema_url="resource_schema_url",
-                )
-            ]
-        )
-        expected = ExportMetricsServiceRequest(
-            resource_metrics=[
-                pb2.ResourceMetrics(
-                    schema_url="resource_schema_url",
-                    resource=OTLPResource(
-                        attributes=[
-                            KeyValue(key="a", value=AnyValue(int_value=1)),
-                            KeyValue(
-                                key="b", value=AnyValue(bool_value=False)
-                            ),
-                        ]
-                    ),
-                    scope_metrics=[
-                        pb2.ScopeMetrics(
-                            scope=InstrumentationScope(
-                                name="first_name", version="first_version"
-                            ),
-                            metrics=[
-                                pb2.Metric(
-                                    name="gauge_int",
-                                    unit="s",
-                                    description="foo",
-                                    gauge=pb2.Gauge(
-                                        data_points=[
-                                            pb2.NumberDataPoint(
-                                                attributes=[
-                                                    KeyValue(
-                                                        key="a",
-                                                        value=AnyValue(
-                                                            int_value=1
-                                                        ),
-                                                    ),
-                                                    KeyValue(
-                                                        key="b",
-                                                        value=AnyValue(
-                                                            bool_value=True
-                                                        ),
-                                                    ),
-                                                ],
-                                                time_unix_nano=1641946016139533244,
-                                                start_time_unix_nano=0,
-                                                as_int=9000,
-                                            )
-                                        ],
-                                    ),
-                                )
-                            ],
-                        )
-                    ],
-                )
-            ]
-        )
-        actual = encode_metrics(metrics_data)
-        self.assertEqual(expected, actual)
-
-    def test_encode_gauge_double(self):
-        metrics_data = MetricsData(
-            resource_metrics=[
-                ResourceMetrics(
-                    resource=Resource(
-                        attributes={"a": 1, "b": False},
-                        schema_url="resource_schema_url",
-                    ),
-                    scope_metrics=[
-                        ScopeMetrics(
-                            scope=SDKInstrumentationScope(
-                                name="first_name",
-                                version="first_version",
-                                schema_url="insrumentation_scope_schema_url",
-                            ),
-                            metrics=[_generate_gauge("gauge_double", 52.028)],
-                            schema_url="instrumentation_scope_schema_url",
-                        )
-                    ],
-                    schema_url="resource_schema_url",
-                )
-            ]
-        )
-        expected = ExportMetricsServiceRequest(
-            resource_metrics=[
-                pb2.ResourceMetrics(
-                    schema_url="resource_schema_url",
-                    resource=OTLPResource(
-                        attributes=[
-                            KeyValue(key="a", value=AnyValue(int_value=1)),
-                            KeyValue(
-                                key="b", value=AnyValue(bool_value=False)
-                            ),
-                        ]
-                    ),
-                    scope_metrics=[
-                        pb2.ScopeMetrics(
-                            scope=InstrumentationScope(
-                                name="first_name", version="first_version"
-                            ),
-                            metrics=[
-                                pb2.Metric(
-                                    name="gauge_double",
-                                    unit="s",
-                                    description="foo",
-                                    gauge=pb2.Gauge(
-                                        data_points=[
-                                            pb2.NumberDataPoint(
-                                                attributes=[
-                                                    KeyValue(
-                                                        key="a",
-                                                        value=AnyValue(
-                                                            int_value=1
-                                                        ),
-                                                    ),
-                                                    KeyValue(
-                                                        key="b",
-                                                        value=AnyValue(
-                                                            bool_value=True
-                                                        ),
-                                                    ),
-                                                ],
-                                                time_unix_nano=1641946016139533244,
-                                                as_double=52.028,
-                                            )
-                                        ],
-                                    ),
-                                )
-                            ],
-                        )
-                    ],
-                )
-            ]
-        )
-        actual = encode_metrics(metrics_data)
-        self.assertEqual(expected, actual)
 
+   
     def test_encode_histogram(self):
         metrics_data = MetricsData(
             resource_metrics=[
@@ -973,35 +659,3 @@ class TestOTLPMetricsEncoder(unittest.TestCase):
         # pylint: disable=protected-access
         actual = encode_metrics(metrics_data)
         self.assertEqual(expected, actual)
-
-    def test_encoding_exception_reraise(self):
-        # this number is too big to fit in a signed 64-bit proto field and causes a ValueError
-        big_number = 2**63
-        metrics_data = MetricsData(
-            resource_metrics=[
-                ResourceMetrics(
-                    resource=Resource(
-                        attributes={},
-                        schema_url="resource_schema_url",
-                    ),
-                    scope_metrics=[
-                        ScopeMetrics(
-                            scope=SDKInstrumentationScope(
-                                name="first_name",
-                                version="first_version",
-                                schema_url="insrumentation_scope_schema_url",
-                            ),
-                            metrics=[_generate_sum("sum_double", big_number)],
-                            schema_url="instrumentation_scope_schema_url",
-                        )
-                    ],
-                    schema_url="resource_schema_url",
-                )
-            ]
-        )
-        with self.assertRaises(EncodingException) as context:
-            encode_metrics(metrics_data)
-
-        # assert that the EncodingException wraps the metric and original exception
-        assert isinstance(context.exception.metric, Metric)
-        assert isinstance(context.exception.original_exception, ValueError)
